" Platform {
    silent function! OSX()
        return has('macunix')
    endfunction
    silent function! LINUX()
        return has('unix') && !has('macunix') && !has('win32unix')
    endfunction
    silent function! WINDOWS()
        return  (has('win16') || has('win32') || has('win64'))
    endfunction

    " figure out our config directory
    let config_dir = has("nvim") ? '~/.config/nvim' : '~/.vim'
" }

    " vim-plug {
        set nocompatible
        if empty(glob(config_dir . '/autoload/plug.vim'))
          silent execute '!curl -fLo ' . config_dir . '/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
          autocmd VimEnter * PlugInstall
        endif
        call plug#begin('~/.config/nvim/plugged')

        " General {
            Plug 'tpope/vim-sensible'
            " Open file at specific line
            Plug 'bogado/file-line'
            Plug 'scrooloose/nerdtree'
            " NERDTree and tabs together in Vim, painlessly
            Plug 'jistr/vim-nerdtree-tabs'
            " gruvbox color
            Plug 'morhetz/gruvbox'
            "Plug 'spf13/vim-colors'
            Plug 'tpope/vim-surround'
            Plug 'tpope/vim-repeat'
            " Git conflict highlighting and jump between conflicts
            Plug 'rhysd/conflict-marker.vim'
            " auto generate pairs for brackets, quotes etc
            Plug 'jiangmiao/auto-pairs'
            " Full path fuzzy file, buffer, mru, tag, ... finder for Vim
            Plug 'ctrlpvim/ctrlp.vim'
            "sublime text like multiple selection feature (ctrl-n)
            "Plug 'terryma/vim-multiple-cursors'
            "Lean & mean status/tabline for vim that's light as air
            Plug 'vim-airline/vim-airline'
            Plug 'vim-airline/vim-airline-themes'
            " powerline fonts for airline
            Plug 'powerline/fonts'
            " Visualize Undo-Tree
            Plug 'mbbill/undotree'
            " visually displaying indent levels in Vim
            Plug 'nathanaelkane/vim-indent-guides'
            " restoring file's cursor position and folding
            Plug 'vim-scripts/restore_view.vim'
            " show version control differences
            Plug 'mhinz/vim-signify'
            " creating own textobjects
            Plug 'kana/vim-textobj-user'
            Plug 'kana/vim-textobj-indent'
        " }
        "
        " Writing {
            " Lightweight auto-correction for Vim
            Plug 'reedes/vim-litecorrect'
            " better sentence selection
            Plug 'reedes/vim-textobj-sentence'
            Plug 'reedes/vim-textobj-quote'
            " Uncover usage problems in your writing
            Plug 'reedes/vim-wordy'
            Plug 'beloglazov/vim-online-thesaurus'
            Plug 'lervag/vimtex'
            Plug 'vimwiki/vimwiki'

        " }

        " Snippets & AutoComplete {
            Plug 'SirVer/ultisnips'
            " Snippets are separated from the engine. Add this if you want them:
            Plug 'honza/vim-snippets'
            "Plug 'ervandew/supertab'
        " }

        " General Programming {
            "Git wrapper
            Plug 'tpope/vim-fugitive'
            " comment/uncomment
            Plug 'scrooloose/nerdcommenter'
            "line up text, must come before markdown plugin
            Plug 'godlygeek/tabular'
            " different levels of paranthesis in different colors
            Plug 'luochen1990/rainbow'
            " ctag
            if executable('ctags')
                "" browse tags of current file
                Plug 'preservim/tagbar'
                ""set tags=~/mytags
            endif
          " Syntax Highlight
          Plug 'dense-analysis/ale'
        " }

        " Python {
            "Plug 'vim-scripts/python_match.vim' , {'for' : 'python'}
            "Plug 'numirias/semshi', { 'do': ':UpdateRemotePlugins' }
        " }

        " Javascript / JSON {
            Plug 'elzr/vim-json'
            Plug 'pangloss/vim-javascript', { 'for' : 'javascript'}
        " }

        " HTML {
            Plug 'othree/html5.vim', { 'for' : 'html' }
            Plug 'vim-scripts/HTML-AutoCloseTag', { 'for' : 'html' }
            Plug 'hail2u/vim-css3-syntax', {'for' : 'css'}
            "color preview for vim.
            Plug 'gorodinskiy/vim-coloresque' , {'for' : ['html', 'css']}
        " }
        " Go Lang {
            "Plug 'fatih/vim-go', { 'for' : 'go', 'do' : ':GoUpdateBinaries' }
            Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
        " }
        " Misc {
            Plug 'godlygeek/tabular'
            Plug 'plasticboy/vim-markdown'
            Plug 'instant-markdown/vim-instant-markdown', {'for': 'markdown', 'do': 'yarn install'}
            "Plug 'spf13/vim-preview'
            "Plug 'tpope/vim-cucumber'
            " Vim syntax for TOML
            Plug 'cespare/vim-toml'
            "Plug 'quentindecock/vim-cucumber-align-pipes'
            "Plug 'saltstack/salt-vim'
            Plug 'christoomey/vim-tmux-navigator'
            Plug 'chrisbra/Recover.vim'
            " VimOutliner is an outline processor
            Plug 'vimoutliner/vimoutliner'
            " todo.txt syntax and shortcuts
            Plug 'freitass/todo.txt-vim'
        " }
        " Code Completion {
          Plug 'neoclide/coc.nvim', {'branch': 'release'}
        " }
        call plug#end()
    " }
" General {

    set virtualedit=onemore             " Allow for cursor beyond last character
    set history=1000                    " Store a ton of history (default is 20)
    " set spell                           " Spell checking on
    set iskeyword-=.                    " '.' is an end of word designator
    set iskeyword-=#                    " '#' is an end of word designator
    set iskeyword-=-                    " '-' is an end of word designator
    syntax on

    " Instead of reverting the cursor to the last position in the buffer, we
    " set it to the first line when editing a git commit message
    au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

    " http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
    " Restore cursor to file position in previous editing session
    " To disable this, add the following to your .vimrc.before.local file:
    "   let g:spf13_no_restore_cursor = 1
    function! ResCur()
        if line("'\"") <= line("$")
            silent! normal! g`"
            return 1
        endif
    endfunction

    augroup resCur
        autocmd!
        autocmd BufWinEnter * call ResCur()
    augroup END
" }
"
" Vim UI {
    colorscheme gruvbox
    let g:gruvbox_hls_cursor="blue"
    "highlight Cursor guifg=green guibg=red ctermfg=green ctermbg=red

    set tabpagemax=15               " Only show 15 tabs
    set showmode                    " Display the current mode

    if has('cmdline_info')
        set ruler                   " Show the ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
        set showcmd                 " Show partial commands in status line and
                                    " Selected characters/lines in visual mode
    endif


    set backspace=indent,eol,start  " Backspace for dummies
    set linespace=0                 " No extra spaces between rows
    set number                      " Line numbers on
    set showmatch                   " Show matching brackets/parenthesis
    set incsearch                   " Find as you type search
    set hlsearch                    " Highlight search terms
    set winminheight=0              " Windows can be 0 line high
    set ignorecase                  " Case insensitive search
    set smartcase                   " Case sensitive when uc present
    set wildmenu                    " Show list instead of just completing
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
    set scrolljump=5                " Lines to scroll when cursor leaves screen
    set scrolloff=3                 " Minimum lines to keep above and below cursor
    set foldenable                  " Auto fold code
    set list
    set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
	" Formatting {

		set nowrap                      " Do not wrap long lines
		set autoindent                  " Indent at the same level of the previous line
		set shiftwidth=4                " Use indents of 4 spaces
		set expandtab                   " Tabs are spaces, not tabs
		set tabstop=4                   " An indentation every four columns
		set softtabstop=4               " Let backspace delete indent
		set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
		set splitright                  " Puts new vsplit windows to the right of the current
		set splitbelow                  " Puts new split windows to the bottom of the current
		"set matchpairs+=<:>             " Match, to be used with %
		set pastetoggle=<F2>           " pastetoggle (sane indentation on pastes)
		"set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks
		"autocmd FileType go autocmd BufWritePre <buffer> Fmt
		autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig

		autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2
		" preceding line best in a plugin but here for now.

		autocmd BufNewFile,BufRead *.coffee set filetype=coffee

		" Workaround vim-commentary for Haskell
		autocmd FileType haskell setlocal commentstring=--\ %s
		" Workaround broken colour highlighting in Haskell
		autocmd FileType haskell,rust setlocal nospell

	" }
" }
"

" Key (re)Mappings {

    " The default leader is '\', but many people prefer ',' as it's in a standard
    let mapleader = ','
    let maplocalleader = '_'

    " Code folding options
    nmap <leader>f0 :set foldlevel=0<CR>
    nmap <leader>f1 :set foldlevel=1<CR>
    nmap <leader>f2 :set foldlevel=2<CR>
    nmap <leader>f3 :set foldlevel=3<CR>
    nmap <leader>f4 :set foldlevel=4<CR>
    nmap <leader>f5 :set foldlevel=5<CR>
    nmap <leader>f6 :set foldlevel=6<CR>
    nmap <leader>f7 :set foldlevel=7<CR>
    nmap <leader>f8 :set foldlevel=8<CR>
    nmap <leader>f9 :set foldlevel=9<CR>
    " Find merge conflict markers
    map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

    " Shortcuts
    " Change Working Directory to that of the current file
    cmap cwd lcd %:p:h
    cmap cd. lcd %:p:h

    " Visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " Allow using the repeat operator with a visual selection (!)
    " http://stackoverflow.com/a/8064607/127816
    vnoremap . :normal .<CR>

    " For when you forget to sudo.. Really Write the file.
    cmap w!! w !sudo tee % >/dev/null

    " Some helpers to edit mode
    " http://vimcasts.org/e/14
    cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
    map <leader>ew :e %%
    map <leader>es :sp %%
    map <leader>ev :vsp %%
    map <leader>et :tabe %%

    " Adjust viewports to the same size
    map <Leader>= <C-w>=

    " Map <Leader>ff to display all lines with keyword under cursor
    " and ask which one to jump to
    nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
" }
"
"
" Plugins-Settings {
"
    " Misc {
        if isdirectory(expand("~/.config/nvim/plugged/nerdtree"))
            let g:NERDShutUp=1
        endif
        if isdirectory(expand("~/.config/nvim/plugged/matchit.zip"))
            let b:match_ignorecase = 1
        endif
    let g:instant_markdown_autostart = 0
    " }
    "
    " NerdTree {
        if isdirectory(expand("~/.config/nvim/plugged/nerdtree"))
            map <C-e> <plug>NERDTreeTabsToggle<CR>
            map <leader>e :NERDTreeFind<CR>
            nmap <leader>nt :NERDTreeFind<CR>

            let NERDTreeShowBookmarks=1
            let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
            let NERDTreeChDirMode=0
            let NERDTreeQuitOnOpen=1
            let NERDTreeMouseMode=2
            let NERDTreeShowHidden=1
            let NERDTreeKeepTreeInNewTab=1
            let g:nerdtree_tabs_open_on_gui_startup=0
        endif
    " }
    "
    " vim-online-thesaurus
    let g:online_thesaurus_map_keys = 0
    nnoremap <Leader>t :OnlineThesaurusCurrentWord<Cr>

    "
    " JSON {
        nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
        let g:vim_json_syntax_conceal = 0
    " }

    if has('nvim')
        let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    endif

    " ultisnippets {
    "
        " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
        "let g:UltiSnipsExpandTrigger="<tab>"
        "let g:UltiSnipsJumpForwardTrigger="<c-b>"
        "let g:UltiSnipsJumpBackwardTrigger="<c-z>"
        let g:UltiSnipsExpandTrigger="<tab>"
        let g:UltiSnipsJumpForwardTrigger="<tab>"
        let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

    " }
    "
    " deoplete.{
        " enable deoplete
        "if has('nvim')
            "let g:deoplete#enable_at_startup = 1
            "" add delay to autocomplete
            "" Use smartcase (consider capitalized, lower case in matching)
            "call deoplete#custom#option({
            "\ 'auto_complete_delay': 200,
            "\ 'smart_case': v:true,
            "\ })
            "call deoplete#custom#source('_',  'max_menu_width', 80)
            "inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

            "" close the preview window automatically: https://jdhao.github.io/2018/12/24/centos_nvim_install_use_guide_en/
            "autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

            "" jedi show docstring
            "let g:deoplete#sources#jedi#show_docstring = 1
            ""let g:deoplete#max_list = 10
        "" make deoplete work with vimtex (e.g., to complete cite commands)
        "call deoplete#custom#var('omni', 'input_patterns', {
          "\ 'tex': g:vimtex#re#deoplete
          "\})
          "let g:deoplete#sources#jedi#ignore_errors = v:true
        "endif
    " }
    " ctrlp {
        if isdirectory(expand("~/.config/nvim/plugged/ctrlp.vim/"))
            let g:ctrlp_working_path_mode = 'ra'
            nnoremap <silent> <D-t> :CtrlP<CR>
            nnoremap <silent> <D-r> :CtrlPMRU<CR>
            let g:ctrlp_custom_ignore = {
                \ 'dir':  '\.git$\|\.hg$\|\.svn$',
                \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

            if executable('ag')
                let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
            elseif executable('ack-grep')
                let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
            elseif executable('ack')
                let s:ctrlp_fallback = 'ack %s --nocolor -f'
            else
                let s:ctrlp_fallback = 'find %s -type f'
            endif
            if exists("g:ctrlp_user_command")
                unlet g:ctrlp_user_command
            endif
            let g:ctrlp_user_command = {
                \ 'types': {
                    \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
                \ },
                \ 'fallback': s:ctrlp_fallback
            \ }

        endif
    "}

    " TagBar {
        if isdirectory(expand("~/.config/nvim/plugged/tagbar/"))
            nnoremap <silent> <leader>tt :TagbarToggle<CR>
        endif

    let g:tagbar_type_vimwiki = {
              \   'ctagstype':'vimwiki'
              \ , 'kinds':['h:header']
              \ , 'sro':'&&&'
              \ , 'kind2scope':{'h':'header'}
              \ , 'sort':0
              \ , 'ctagsbin':'~/dotfiles/vim/vwtags.py'
              \ , 'ctagsargs': 'markdown'
              \ }
    "}
    " Rainbow {
        if isdirectory(expand("~/.config/nvim/plugged/rainbow/"))
            let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
        endif
    "}
    "
    
    " undotree
        nnoremap <F5> :UndotreeToggle<cr>
    " Fugitive {
        if isdirectory(expand("~/.config/nvim/plugged/vim-fugitive/"))
            nnoremap <silent> <leader>gs :Gstatus<CR>
            nnoremap <silent> <leader>gd :Gdiff<CR>
            nnoremap <silent> <leader>gc :Gcommit<CR>
            nnoremap <silent> <leader>gb :Gblame<CR>
            nnoremap <silent> <leader>gl :Glog<CR>
            nnoremap <silent> <leader>gp :Git push<CR>
            nnoremap <silent> <leader>gr :Gread<CR>
            nnoremap <silent> <leader>gw :Gwrite<CR>
            nnoremap <silent> <leader>ge :Gedit<CR>
            " Mnemonic _i_nteractive
            nnoremap <silent> <leader>gi :Git add -p %<CR>
            nnoremap <silent> <leader>gg :SignifyToggle<CR>
        endif
    "}
    "
    " vim-airline {
        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#left_sep = ' '
        let g:airline#extensions#tabline#left_alt_sep = '|'
        let g:airline#extensions#tabline#formatter = 'default'
        " ALE output to airline
        if isdirectory(expand("~/.config/nvim/plugged/vim-airline-themes/"))
            if !exists('g:airline_theme')
                "let g:airline_theme = 'solarized'
                "let g:airline_theme = 'powerlineish'
                let g:airline_theme = 'gruvbox'
            endif
        endif
        "let g:airline#extensions#bufferline#enabled = 1
        let g:airline#extensions#ale#enabled = 1
        let g:airline#extensions#tabline#fnamemod = ':t'
    " }
" }
"
"
"
"
"" stuff to sort
    " {
        " Right wrapping behavior for text like files
        au BufRead,BufNewFile *.txt,*.tex,*.md,*.wiki,*.slide set wrap linebreak nolist textwidth=0 wrapmargin=0

        " Enable spell checker for text like files
        au BufRead *.txt,*.tex,*.md,*.wiki,*.slide setlocal spell
        "hi SpellBad cterm=underline ctermfg=red
        au BufRead *.txt,*.tex,*.md,*.wiki,*.slide hi SpellBad cterm=underline,bold ctermfg=white ctermbg=red
        " Vertical line at 88 char to follow PEP (black adapted)
        if exists('+colorcolumn')
          set colorcolumn=88
        else
          au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>88v.\+', -1)
        endif
        " move faster between vim splits
        nnoremap <C-J> <C-W><C-J>
        nnoremap <C-K> <C-W><C-K>
        nnoremap <C-L> <C-W><C-L>
        nnoremap <C-H> <C-W><C-H>

        " Speed up highlighting
        "set nocursorcolumn
        "set nocursorline
        "set norelativenumber
        " color to col 128
        "set synmaxcol=128
        "syntax sync minlines=256
        
        " Yank in vim/tmux combination
        set clipboard^=unnamed,unnamedplus

        " fix tmux neovim pane switching issue
        " https://github.com/neovim/neovim/issues/2048#issuecomment-78045837
        nnoremap <silent> <BS> :TmuxNavigateLeft<cr>

    " }


    " GOLANG
    " {
        " autorun goimports when saving
        let g:go_fmt_command = "goimports"
        let g:delve_backend = "native"
    " }

    " VimWiki
    " {
    
        let g:vimwiki_list = [{
                    \ 'path': '~/Dropbox/Apps/VimWiki',
                    \ 'syntax': 'markdown', 'ext': '.md',
                    \ 'path_html': '~/Dropbox/Apps/VimWiki/html',
                    \ 'custom_wiki2html': '~/dotfiles/vim/convert.py'
                    \ }]
    au BufNewFile ~/Dropbox/Apps/vimwiki/diary/*.md :silent 0r !~/dotfiles/vim/generate-vimwiki-diary-template.py '%'
    " }
    "
    "
    " Wordy
    let g:wordy#ring = [
      \ 'weak',
      \ ['being', 'passive-voice', ],
      \ 'business-jargon',
      \ 'weasel',
      \ 'puffery',
      \ ['problematic', 'redundant', ],
      \ ['colloquial', 'idiomatic', 'similies', ],
      \ 'art-jargon',
      \ ['contractions', 'opinion', 'vague-time', 'said-synonyms', ],
      \ 'adjectives',
      \ 'adverbs',
      \ ]


    " vimtex
    " {
        let g:vimtex_compiler_latexmk = {
        \ 'continuous' : 1,
        \ 'options' : [
        \   '-pdf',
        "\   '-pdflatex="xelatex --shell-escape %O %S"',
        \   '-pdflatex="pdflatex --shell-escape %O %S"',
        \   '-verbose',
        \   '-file-line-error',
        \   '-synctex=1',
        \   '-interaction=nonstopmode',
        \ ]
        \}
        "let g:vimtex_compiler_latexmk = { 'options': [ '-shell-escape' ]}
        let g:vimtex_quickfix_open_on_warning = 1
        "let g:vimtex_quickfix_latexlog = {
                    "\ 'overfull' : 0,
                    "\ 'underfull' : 0,
        "\}
          " Disable custom warnings based on regexp
          let g:vimtex_quickfix_ignore_filters = [
                    \ 'Overwriting file',
                    \ 'Marginpar on page',
          \]
        " proper minted environemt syntax
        let g:vimtex_syntax_minted = [
              \ {
              \   'lang' : 'c',
              \ },
              \ {
              \   'lang' : 'cpp',
              \   'environments' : ['cppcode', 'cppcode_test'],
              \ },
              \ {
              \   'lang' : 'csharp',
              \   'syntax' : 'cs'
              \ },
              \ {
              \   'lang' : 'python',
              \   'ignore' : [
              \     'pythonEscape',
              \     'pythonBEscape',
              \     ],
              \ }
              \]
        " Mac OS
        if OSX()
            let g:vimtex_view_method = 'skim'
        " Linux
        elseif LINUX()
            let g:vimtex_view_method = 'zathura'
        endif
        if has('nvim')
            let g:vimtex_compiler_progname = 'nvr'
        endif


    " ALE
    " {
        let g:ale_lint_on_enter = 0
        let g:ale_lint_on_text_changed = 'never'
        let g:ale_echo_msg_error_str = 'E'
        let g:ale_echo_msg_warning_str = 'W'
        let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
        nmap <F10> :ALEFix<CR>
        let g:ale_linters = {
      \   'python': ['flake8', 'pylint'],
      \   'ruby': ['standardrb', 'rubocop'],
      \   'javascript': ['eslint'],
      \}
        let g:ale_fixers = {'python': ['black', 'isort']}
        let b:ale_fix_on_save = 1
    "" }


    " coc.nvim
    " TextEdit might fail if hidden is not set.
    set hidden

    " Some servers have issues with backup files, see #649.
    set nobackup
    set nowritebackup

    " Give more space for displaying messages.
    set cmdheight=2

    " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
    " delays and poor user experience.
    set updatetime=300

    " Don't pass messages to |ins-completion-menu|.
    set shortmess+=c

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    if has("nvim-0.5.0") || has("patch-8.1.1564")
      " Recently vim can merge signcolumn and number column into one
      set signcolumn=number
    else
      set signcolumn=yes
    endif

    " Use tab for trigger completion with characters ahead and navigate.
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " other plugin before putting this into your config.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ CheckBackspace() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! CheckBackspace() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion.
    if has('nvim')
      inoremap <silent><expr> <c-space> coc#refresh()
    else
      inoremap <silent><expr> <c-@> coc#refresh()
    endif

    " Make <CR> auto-select the first completion item and notify coc.nvim to
    " format on enter, <cr> could be remapped by other vim plugin
    inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                                  \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window.
    nnoremap <silent> K :call ShowDocumentation()<CR>

    function! ShowDocumentation()
      if CocAction('hasProvider', 'hover')
        call CocActionAsync('doHover')
      else
        call feedkeys('K', 'in')
      endif
    endfunction

    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)

    " Formatting selected code.
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder.
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Applying codeAction to the selected region.
    " Example: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap keys for applying codeAction to the current buffer.
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Apply AutoFix to problem on the current line.
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Run the Code Lens action on the current line.
    nmap <leader>cl  <Plug>(coc-codelens-action)

    " Map function and class text objects
    " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
    xmap if <Plug>(coc-funcobj-i)
    omap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap af <Plug>(coc-funcobj-a)
    xmap ic <Plug>(coc-classobj-i)
    omap ic <Plug>(coc-classobj-i)
    xmap ac <Plug>(coc-classobj-a)
    omap ac <Plug>(coc-classobj-a)

    " Remap <C-f> and <C-b> for scroll float windows/popups.
    if has('nvim-0.4.0') || has('patch-8.2.0750')
      nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
      nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
      inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
      inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
      vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
      vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    endif

    " Use CTRL-S for selections ranges.
    " Requires 'textDocument/selectionRange' support of language server.
    nmap <silent> <C-s> <Plug>(coc-range-select)
    xmap <silent> <C-s> <Plug>(coc-range-select)

    " Add `:Format` command to format current buffer.
    command! -nargs=0 Format :call CocActionAsync('format')

    " Add `:Fold` command to fold current buffer.
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Add `:OR` command for organize imports of the current buffer.
    command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

    " Add (Neo)Vim's native statusline support.
    " NOTE: Please see `:h coc-status` for integrations with external plugins that
    " provide custom statusline: lightline.vim, vim-airline.
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

    " Mappings for CoCList
    " Show all diagnostics.
    nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions.
    nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
    " Show commands.
    nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
    " Find symbol of current document.
    nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
    " Search workspace symbols.
    nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item.
    nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
    " Resume latest coc list.
    nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

    " mixed
    " {
        if OSX()
            " use leader d to look up in mac os dictionary
            nmap <silent> <Leader>d :!open dict://<cword><CR><CR>
        endif

        " Latex spell checking
        " disable in comments
        let g:tex_comment_nospell=1
        " never use plain tex for new files
        let g:tex_flavor='latex'
        "don't conceal math environments etc
        let g:tex_conceal = ""

        " present filetype from golang .slide format
        autocmd BufNewFile,BufRead *.slide set filetype=present
        let g:NERDCustomDelimiters = { 'present': { 'left': '# ','right': '' } }

        " autodectect language
        "map <F6> :'{,'}SpellLangIdentify setlocal spell<CR>:setl spl<CR>

    " }

" }

" Functions {
    " Shell command
    function! s:RunShellCommand(cmdline)
        botright new

        setlocal buftype=nofile
        setlocal bufhidden=delete
        setlocal nobuflisted
        setlocal noswapfile
        setlocal nowrap
        setlocal filetype=shell
        setlocal syntax=shell

        call setline(1, a:cmdline)
        call setline(2, substitute(a:cmdline, '.', '=', 'g'))
        execute 'silent $read !' . escape(a:cmdline, '%#')
        setlocal nomodifiable
        1
    endfunction

    command! -complete=file -nargs=+ Shell call s:RunShellCommand(<q-args>)
    " e.g. Grep current file for <search_term>: Shell grep -Hn <search_term> %
" }


" don't hide some symbols, see https://vi.stackexchange.com/questions/7258/how-do-i-prevent-vim-from-hiding-symbols-in-markdown-and-json/7263
"set conceallevel=0
"let g:vim_markdown_conceal = 1
"au BufRead,BufNewFile *.md set filetype=markdown
"autocmd BufEnter,BufRead,BufNewFile,BufReadPost *.md set filetype=markdown
"let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
"let g:markdown_minlines = 1000
filetype on
filetype plugin on
filetype indent on
