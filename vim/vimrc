" -----------------------------------------------------------------------------
"  vim config, originally based on spf13.com
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
" -----------------------------------------------------------------------------
" Platform {
    silent function! OSX()
        return has('macunix')
    endfunction
    silent function! LINUX()
        return has('unix') && !has('macunix') && !has('win32unix')
    endfunction
    silent function! WINDOWS()
        return  (has('win16') || has('win32') || has('win64'))
    endfunction

    " figure out our config directory
    let config_dir = has("nvim") ? '~/.config/nvim' : '~/.vim'
" }

    " vim-plug {
        set nocompatible
        if empty(glob(config_dir . '/autoload/plug.vim'))
          silent execute '!curl -fLo ' . config_dir . '/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
          autocmd VimEnter * PlugInstall
        endif
        call plug#begin('~/.config/nvim/plugged')

        " General {
            " Open file at specific line
            Plug 'bogado/file-line'
            Plug 'scrooloose/nerdtree'
            " NERDTree and tabs together in Vim, painlessly
            Plug 'jistr/vim-nerdtree-tabs'
            " Collection of vim colorschemes
            "Plug 'flazz/vim-colorschemes'
            "" switch easy between colors
            "Plug 'felixhummel/setcolors.vim'
            "Plug 'altercation/vim-colors-solarized'
            Plug 'morhetz/gruvbox'
            "Plug 'spf13/vim-colors'
            Plug 'tpope/vim-surround'
            Plug 'tpope/vim-repeat'
            " Git conflict highlighting and jump between conflicts
            Plug 'rhysd/conflict-marker.vim'
            " auto generate pairs for brackets, quotes etc
            Plug 'jiangmiao/auto-pairs'
            " Full path fuzzy file, buffer, mru, tag, ... finder for Vim
            Plug 'ctrlpvim/ctrlp.vim'
            "sublime text like multiple selection feature (ctrl-n)
            "Plug 'terryma/vim-multiple-cursors'
            "Lean & mean status/tabline for vim that's light as air
            Plug 'vim-airline/vim-airline'
            Plug 'vim-airline/vim-airline-themes'
            " powerline fonts for airline
            Plug 'powerline/fonts'
            " Visualize Undo-Tree
            Plug 'mbbill/undotree'
            " visually displaying indent levels in Vim
            Plug 'nathanaelkane/vim-indent-guides'
            " restoring file's cursor position and folding
            Plug 'vim-scripts/restore_view.vim'
            " show version control differences
            Plug 'mhinz/vim-signify'
            " creating own textobjects
            Plug 'kana/vim-textobj-user'
            Plug 'kana/vim-textobj-indent'
            Plug 'vimwiki/vimwiki'
        " }
        "
        " Writing {
            " Lightweight auto-correction for Vim
            Plug 'reedes/vim-litecorrect'
            " better sentence selection
            Plug 'reedes/vim-textobj-sentence'
            Plug 'reedes/vim-textobj-quote'
            " Uncover usage problems in your writing
            Plug 'reedes/vim-wordy'
            Plug 'beloglazov/vim-online-thesaurus'
            Plug 'lervag/vimtex'
        " }

        " Snippets & AutoComplete {
            Plug 'SirVer/ultisnips'
            " Snippets are separated from the engine. Add this if you want them:
            Plug 'honza/vim-snippets'
            "Plug 'ervandew/supertab'
        " }

        " General Programming {
            "Git wrapper
            Plug 'tpope/vim-fugitive'
            " comment/uncomment
            Plug 'scrooloose/nerdcommenter'
            "line up text, must come before markdown plugin
            Plug 'godlygeek/tabular'
            " different levels of paranthesis in different colors
            Plug 'luochen1990/rainbow'
            " ctag
            if executable('ctags')
                " browse tags of current file
                Plug 'majutsushi/tagbar'
                set tags=~/mytags
            endif
          " Syntax Highlight
          Plug 'w0rp/ale'
        " }

        " Python {
            " Pick either python-mode or pyflakes & pydoc
            "Plug 'klen/python-mode', {'for' : 'python'}
            "Plug 'yssource/python.vim' , {'for' : 'python'}
            Plug 'vim-scripts/python_match.vim' , {'for' : 'python'}
            "Plug 'vim-scripts/pythoncomplete' , {'for' : 'python'}
        " }

        " Javascript / JSON {
            Plug 'elzr/vim-json'
            Plug 'pangloss/vim-javascript', { 'for' : 'javascript'}
        " }

        " HTML {
            Plug 'othree/html5.vim', { 'for' : 'html' }
            Plug 'vim-scripts/HTML-AutoCloseTag', { 'for' : 'html' }
            Plug 'hail2u/vim-css3-syntax', {'for' : 'css'}
            "color preview for vim.
            Plug 'gorodinskiy/vim-coloresque' , {'for' : ['html', 'css']}
        " }
        " Go Lang {
            Plug 'fatih/vim-go', { 'for' : 'go', 'do' : ':GoUpdateBinaries' }
        " }
        " Misc {
            Plug 'godlygeek/tabular'
            Plug 'plasticboy/vim-markdown'
            "Plug 'suan/vim-instant-markdown'
            "Plug 'spf13/vim-preview'
            "Plug 'tpope/vim-cucumber'
            " Vim syntax for TOML
            Plug 'cespare/vim-toml'
            "Plug 'quentindecock/vim-cucumber-align-pipes'
            "Plug 'saltstack/salt-vim'
            Plug 'christoomey/vim-tmux-navigator'
            Plug 'chrisbra/Recover.vim'
            " VimOutliner is an outline processor
            Plug 'vimoutliner/vimoutliner'
            " todo.txt syntax and shortcuts
            Plug 'freitass/todo.txt-vim'
        " }
        " Code Completion {
            if has('nvim')
              "Plug 'neomake/neomake'
              Plug 'Shougo/deoplete.nvim', { 'do' : ':UpdateRemotePlugins' }
              Plug 'zchee/deoplete-jedi'
              Plug 'zchee/deoplete-go', { 'do' : 'make' }
              Plug 'sebdah/vim-delve'
            else
              Plug 'tpope/vim-sensible'
            endif
        " }
        call plug#end()
    " }
" General {

    set virtualedit=onemore             " Allow for cursor beyond last character
    set history=1000                    " Store a ton of history (default is 20)
    " set spell                           " Spell checking on
    set iskeyword-=.                    " '.' is an end of word designator
    set iskeyword-=#                    " '#' is an end of word designator
    set iskeyword-=-                    " '-' is an end of word designator
    syntax on

    " Instead of reverting the cursor to the last position in the buffer, we
    " set it to the first line when editing a git commit message
    au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

    " http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
    " Restore cursor to file position in previous editing session
    " To disable this, add the following to your .vimrc.before.local file:
    "   let g:spf13_no_restore_cursor = 1
    function! ResCur()
        if line("'\"") <= line("$")
            silent! normal! g`"
            return 1
        endif
    endfunction

    augroup resCur
        autocmd!
        autocmd BufWinEnter * call ResCur()
    augroup END
" }
"
" Vim UI {
    colorscheme gruvbox
    let g:gruvbox_hls_cursor="blue"
    "highlight Cursor guifg=green guibg=red ctermfg=green ctermbg=red

    set tabpagemax=15               " Only show 15 tabs
    set showmode                    " Display the current mode
    "set termguicolors
    "set cursorline                  " Highlight current line

    "highlight clear SignColumn      " SignColumn should match background
    "highlight clear LineNr          " Current line number row will have same background color in relative mode
    "highlight clear Cursor

    if has('cmdline_info')
        set ruler                   " Show the ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
        set showcmd                 " Show partial commands in status line and
                                    " Selected characters/lines in visual mode
    endif

    "if has('statusline')
        "set laststatus=2

        "" Broken down into easily includeable segments
        "set statusline=%<%f\                     " Filename
        "set statusline+=%w%h%m%r                 " Options
        "if !exists('g:override_spf13_bundles')
            "set statusline+=%{fugitive#statusline()} " Git Hotness
        "endif
        "set statusline+=\ [%{&ff}/%Y]            " Filetype
        "set statusline+=\ [%{getcwd()}]          " Current dir
        "set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
        "set statusline+=%#warningmsg#
        "set statusline+=%{SyntasticStatuslineFlag()}
        "set statusline+=%*
    "endif

    set backspace=indent,eol,start  " Backspace for dummies
    set linespace=0                 " No extra spaces between rows
    set number                      " Line numbers on
    set showmatch                   " Show matching brackets/parenthesis
    set incsearch                   " Find as you type search
    set hlsearch                    " Highlight search terms
    set winminheight=0              " Windows can be 0 line high
    set ignorecase                  " Case insensitive search
    set smartcase                   " Case sensitive when uc present
    set wildmenu                    " Show list instead of just completing
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
    set scrolljump=5                " Lines to scroll when cursor leaves screen
    set scrolloff=3                 " Minimum lines to keep above and below cursor
    set foldenable                  " Auto fold code
    set list
    set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
	" Formatting {

		set nowrap                      " Do not wrap long lines
		set autoindent                  " Indent at the same level of the previous line
		set shiftwidth=4                " Use indents of 4 spaces
		set expandtab                   " Tabs are spaces, not tabs
		set tabstop=4                   " An indentation every four columns
		set softtabstop=4               " Let backspace delete indent
		set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
		set splitright                  " Puts new vsplit windows to the right of the current
		set splitbelow                  " Puts new split windows to the bottom of the current
		"set matchpairs+=<:>             " Match, to be used with %
		set pastetoggle=<F2>           " pastetoggle (sane indentation on pastes)
		"set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks
		"autocmd FileType go autocmd BufWritePre <buffer> Fmt
		autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig

		autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2
		" preceding line best in a plugin but here for now.

		autocmd BufNewFile,BufRead *.coffee set filetype=coffee

		" Workaround vim-commentary for Haskell
		autocmd FileType haskell setlocal commentstring=--\ %s
		" Workaround broken colour highlighting in Haskell
		autocmd FileType haskell,rust setlocal nospell

	" }
" }
"

" Key (re)Mappings {

    " The default leader is '\', but many people prefer ',' as it's in a standard
    let mapleader = ','
    let maplocalleader = '_'

    " Code folding options
    nmap <leader>f0 :set foldlevel=0<CR>
    nmap <leader>f1 :set foldlevel=1<CR>
    nmap <leader>f2 :set foldlevel=2<CR>
    nmap <leader>f3 :set foldlevel=3<CR>
    nmap <leader>f4 :set foldlevel=4<CR>
    nmap <leader>f5 :set foldlevel=5<CR>
    nmap <leader>f6 :set foldlevel=6<CR>
    nmap <leader>f7 :set foldlevel=7<CR>
    nmap <leader>f8 :set foldlevel=8<CR>
    nmap <leader>f9 :set foldlevel=9<CR>
    " Find merge conflict markers
    map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

    " Shortcuts
    " Change Working Directory to that of the current file
    cmap cwd lcd %:p:h
    cmap cd. lcd %:p:h

    " Visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " Allow using the repeat operator with a visual selection (!)
    " http://stackoverflow.com/a/8064607/127816
    vnoremap . :normal .<CR>

    " For when you forget to sudo.. Really Write the file.
    cmap w!! w !sudo tee % >/dev/null

    " Some helpers to edit mode
    " http://vimcasts.org/e/14
    cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
    map <leader>ew :e %%
    map <leader>es :sp %%
    map <leader>ev :vsp %%
    map <leader>et :tabe %%

    " Adjust viewports to the same size
    map <Leader>= <C-w>=

    " Map <Leader>ff to display all lines with keyword under cursor
    " and ask which one to jump to
    nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
" }
"
"
" Plugins-Settings {
"
    " Misc {
        if isdirectory(expand("~/.config/nvim/plugged/nerdtree"))
            let g:NERDShutUp=1
        endif
        if isdirectory(expand("~/.config/nvim/plugged/matchit.zip"))
            let b:match_ignorecase = 1
        endif
    " }
    "
    " NerdTree {
        if isdirectory(expand("~/.config/nvim/plugged/nerdtree"))
            map <C-e> <plug>NERDTreeTabsToggle<CR>
            map <leader>e :NERDTreeFind<CR>
            nmap <leader>nt :NERDTreeFind<CR>

            let NERDTreeShowBookmarks=1
            let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
            let NERDTreeChDirMode=0
            let NERDTreeQuitOnOpen=1
            let NERDTreeMouseMode=2
            let NERDTreeShowHidden=1
            let NERDTreeKeepTreeInNewTab=1
            let g:nerdtree_tabs_open_on_gui_startup=0
        endif
    " }
    "
    " vim-online-thesaurus
    let g:online_thesaurus_map_keys = 0
    nnoremap <Leader>t :OnlineThesaurusCurrentWord<Cr>

    "
    " JSON {
        nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
        let g:vim_json_syntax_conceal = 0
    " }


    " ultisnippets {
    "
        " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
        "let g:UltiSnipsExpandTrigger="<tab>"
        "let g:UltiSnipsJumpForwardTrigger="<c-b>"
        "let g:UltiSnipsJumpBackwardTrigger="<c-z>"
        inoremap <silent><expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
        let g:UltiSnipsExpandTrigger="<tab>"
        let g:UltiSnipsJumpForwardTrigger="<tab>"
        let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
    " }
    "
    " Supertab
    " {
        "let g:SuperTabDefaultCompletionType = "<c-n>"
    " }
    "
    if has('nvim')
        let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    endif
    " deoplete.{
        " enable deoplete
        if has('nvim')
            let g:deoplete#enable_at_startup = 1
            " add 50ms delay to autocomplete
            let g:deoplete#auto_complete_delay = 50
            " Use smartcase (consider capitalized, lower case in matching)
            let g:deoplete#enable_smart_case = 1

            call deoplete#custom#source('_',  'max_menu_width', 80)
            " other way
            " disable autocomplete
            "let g:deoplete#disable_auto_complete = 1
            "if has("gui_running")
                "inoremap <silent><expr><C-Space> deoplete#mappings#manual_complete()
            "else
                "inoremap <silent><expr><C-@> deoplete#mappings#manual_complete()
            "endif
            " Uncomment to diable autocompletion
            " disable automatic completion
            "let g:deoplete#disable_auto_complete = 1
            " use leader-tab for autocomplete
            "inoremap <silent><expr> <Leader><Tab>
            "\ pumvisible() ? "\<C-n>" :
            "\ deoplete#mappings#manual_complete()
            " jedi show docstring
            let g:deoplete#sources#jedi#show_docstring = 1
            "let g:deoplete#max_list = 10
          call deoplete#custom#var('omni', 'input_patterns', {
          \ 'tex': g:vimtex#re#deoplete
          \})
        endif
    " }
    " ctrlp {
        if isdirectory(expand("~/.config/nvim/plugged/ctrlp.vim/"))
            let g:ctrlp_working_path_mode = 'ra'
            nnoremap <silent> <D-t> :CtrlP<CR>
            nnoremap <silent> <D-r> :CtrlPMRU<CR>
            let g:ctrlp_custom_ignore = {
                \ 'dir':  '\.git$\|\.hg$\|\.svn$',
                \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

            if executable('ag')
                let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
            elseif executable('ack-grep')
                let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
            elseif executable('ack')
                let s:ctrlp_fallback = 'ack %s --nocolor -f'
            else
                let s:ctrlp_fallback = 'find %s -type f'
            endif
            if exists("g:ctrlp_user_command")
                unlet g:ctrlp_user_command
            endif
            let g:ctrlp_user_command = {
                \ 'types': {
                    \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
                \ },
                \ 'fallback': s:ctrlp_fallback
            \ }

        endif
    "}

    " TagBar {
        if isdirectory(expand("~/.config/nvim/plugged/tagbar/"))
            nnoremap <silent> <leader>tt :TagbarToggle<CR>
        endif
    "}
    " Rainbow {
        if isdirectory(expand("~/.config/nvim/plugged/rainbow/"))
            let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
        endif
    "}
    "
    
    " undotree
        nnoremap <F5> :UndotreeToggle<cr>
    " Fugitive {
        if isdirectory(expand("~/.config/nvim/plugged/vim-fugitive/"))
            nnoremap <silent> <leader>gs :Gstatus<CR>
            nnoremap <silent> <leader>gd :Gdiff<CR>
            nnoremap <silent> <leader>gc :Gcommit<CR>
            nnoremap <silent> <leader>gb :Gblame<CR>
            nnoremap <silent> <leader>gl :Glog<CR>
            nnoremap <silent> <leader>gp :Git push<CR>
            nnoremap <silent> <leader>gr :Gread<CR>
            nnoremap <silent> <leader>gw :Gwrite<CR>
            nnoremap <silent> <leader>ge :Gedit<CR>
            " Mnemonic _i_nteractive
            nnoremap <silent> <leader>gi :Git add -p %<CR>
            nnoremap <silent> <leader>gg :SignifyToggle<CR>
        endif
    "}
    "
    " vim-airline {
        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#left_sep = ' '
        let g:airline#extensions#tabline#left_alt_sep = '|'
        let g:airline#extensions#tabline#formatter = 'default'
        " ALE output to airline
        if isdirectory(expand("~/.config/nvim/plugged/vim-airline-themes/"))
            if !exists('g:airline_theme')
                "let g:airline_theme = 'solarized'
                "let g:airline_theme = 'powerlineish'
                let g:airline_theme = 'gruvbox'
            endif
        endif
        "let g:airline#extensions#bufferline#enabled = 1
        let g:airline#extensions#ale#enabled = 1
        let g:airline#extensions#tabline#fnamemod = ':t'
    " }
" }


    " stuff to sort
    " {
        " Right wrapping behavior for text like files
        au BufRead,BufNewFile *.txt,*.tex,*.md,*.wiki,*.slide set wrap linebreak nolist textwidth=0 wrapmargin=0

        " Enable spell checker for text like files
        au BufRead *.txt,*.tex,*.md,*.wiki,*.slide setlocal spell
        "hi SpellBad cterm=underline ctermfg=red
        au BufRead *.txt,*.tex,*.md,*.wiki,*.slide hi SpellBad cterm=underline,bold ctermfg=white ctermbg=red
        " Vertical line at 80 char to follow PEP
        if exists('+colorcolumn')
          set colorcolumn=80
        else
          au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
        endif
        " move faster between vim splits
        nnoremap <C-J> <C-W><C-J>
        nnoremap <C-K> <C-W><C-K>
        nnoremap <C-L> <C-W><C-L>
        nnoremap <C-H> <C-W><C-H>

        " Speed up highlighting
        "set nocursorcolumn
        "set nocursorline
        "set norelativenumber
        " color to col 128
        "set synmaxcol=128
        "syntax sync minlines=256
        
        " Yank in vim/tmux combination
        set clipboard^=unnamed,unnamedplus

        " fix tmux neovim pane switching issue
        " https://github.com/neovim/neovim/issues/2048#issuecomment-78045837
        nnoremap <silent> <BS> :TmuxNavigateLeft<cr>

    " }


    " GOLANG
    " {
        " autorun goimports when saving
        let g:go_fmt_command = "goimports"
        let g:delve_backend = "native"
    " }

    " VimWiki
    " {
        let wiki = {}
        let g:vimwikidir = $HOME . "/Dropbox/Apps/VimWiki"
        let wiki.path = g:vimwikidir
        "let g:vimwiki_list=[wiki]
        let g:vimwiki_list = [{'path': '~/Dropbox/Apps/VimWiki',
                       \ 'syntax': 'markdown', 'ext': '.md'}]
    " }

    " vimtex
    " {
        let g:vimtex_latexmk_continuous = 1
        let g:vimtex_compiler_latexmk = {
        \ 'options' : [
        \   '-pdf',
        \   '-pdflatex="xelatex --shell-escape %O %S"',
        \   '-verbose',
        \   '-file-line-error',
        \   '-synctex=1',
        \   '-interaction=nonstopmode',
        \ ]
        \}
        "let g:vimtex_compiler_latexmk = { 'options': [ '-shell-escape' ]}
        "let g:vimtex_quickfix_open_on_warning = 0
        let g:vimtex_quickfix_latexlog = {
                    \ 'overfull' : 0,
                    \ 'underfull' : 0,
        \}
        " proper minted environemt syntax
        let g:vimtex_syntax_minted = [
              \ {
              \   'lang' : 'c',
              \ },
              \ {
              \   'lang' : 'cpp',
              \   'environments' : ['cppcode', 'cppcode_test'],
              \ },
              \ {
              \   'lang' : 'csharp',
              \   'syntax' : 'cs'
              \ },
              \ {
              \   'lang' : 'python',
              \   'ignore' : [
              \     'pythonEscape',
              \     'pythonBEscape',
              \     ],
              \ }
              \]
        " Mac OS
        let g:vimtex_view_method = 'skim'
        if OSX()
            let g:vimtex_view_method = 'skim'
        " Linux
        elseif LINUX()
            let g:vimtex_view_method = 'zathura'
        endif
        if has('nvim')
            let g:vimtex_compiler_progname = 'nvr'
        endif


    " ALE
    " {
        let g:ale_lint_on_enter = 0
        let g:ale_lint_on_text_changed = 'never'
        let g:ale_echo_msg_error_str = 'E'
        let g:ale_echo_msg_warning_str = 'W'
        let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
        let g:ale_fixers = {'python': ['black', 'isort']}
        let b:ale_fix_on_save = 1
    "let g:ale_fixers = {
        "\   'python': ['black'],
        "\}
    "" }

    " mixed
    " {
        if OSX()
            " use leader d to look up in mac os dictionary
            nmap <silent> <Leader>d :!open dict://<cword><CR><CR>
        endif

        " Latex spell checking
        " disable in comments
        let g:tex_comment_nospell=1
        " never use plain tex for new files
        let g:tex_flavor='latex'
        "don't conceal math environments etc
        let g:tex_conceal = ""

        " present filetype from golang .slide format
        autocmd BufNewFile,BufRead *.slide set filetype=present
        let g:NERDCustomDelimiters = { 'present': { 'left': '# ','right': '' } }

        " autodectect language
        "map <F6> :'{,'}SpellLangIdentify setlocal spell<CR>:setl spl<CR>

    " }

" }

" Functions {
    " Shell command
    function! s:RunShellCommand(cmdline)
        botright new

        setlocal buftype=nofile
        setlocal bufhidden=delete
        setlocal nobuflisted
        setlocal noswapfile
        setlocal nowrap
        setlocal filetype=shell
        setlocal syntax=shell

        call setline(1, a:cmdline)
        call setline(2, substitute(a:cmdline, '.', '=', 'g'))
        execute 'silent $read !' . escape(a:cmdline, '%#')
        setlocal nomodifiable
        1
    endfunction

    command! -complete=file -nargs=+ Shell call s:RunShellCommand(<q-args>)
    " e.g. Grep current file for <search_term>: Shell grep -Hn <search_term> %
" }


" don't hide some symbols, see https://vi.stackexchange.com/questions/7258/how-do-i-prevent-vim-from-hiding-symbols-in-markdown-and-json/7263
"set conceallevel=0
"let g:vim_markdown_conceal = 1
"au BufRead,BufNewFile *.md set filetype=markdown
autocmd BufEnter,BufRead,BufNewFile,BufReadPost *.md set filetype=markdown
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
let g:markdown_minlines = 100
filetype on
filetype plugin on
filetype indent on
